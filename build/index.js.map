{"version":3,"file":"index.js","mappings":"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","sources":["webpack://CssSelectorGenerator/webpack/universalModuleDefinition","webpack://CssSelectorGenerator/./node_modules/cartesian/index.js","webpack://CssSelectorGenerator/./node_modules/xtend/immutable.js","webpack://CssSelectorGenerator/webpack/bootstrap","webpack://CssSelectorGenerator/webpack/runtime/compat get default export","webpack://CssSelectorGenerator/webpack/runtime/define property getters","webpack://CssSelectorGenerator/webpack/runtime/hasOwnProperty shorthand","webpack://CssSelectorGenerator/webpack/runtime/make namespace object","webpack://CssSelectorGenerator/./node_modules/iselement/module/index.js","webpack://CssSelectorGenerator/./src/utilities-data.ts","webpack://CssSelectorGenerator/./src/utilities-dom.ts","webpack://CssSelectorGenerator/./src/selector-nth-child.ts","webpack://CssSelectorGenerator/./src/constants.ts","webpack://CssSelectorGenerator/./src/selector-fallback.ts","webpack://CssSelectorGenerator/./src/utilities-options.ts","webpack://CssSelectorGenerator/./src/selector-attribute.ts","webpack://CssSelectorGenerator/./src/selector-class.ts","webpack://CssSelectorGenerator/./src/selector-tag.ts","webpack://CssSelectorGenerator/./src/selector-nth-of-type.ts","webpack://CssSelectorGenerator/./src/utilities-powerset.ts","webpack://CssSelectorGenerator/./src/utilities-selectors.ts","webpack://CssSelectorGenerator/./src/selector-id.ts","webpack://CssSelectorGenerator/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CssSelectorGenerator\"] = factory();\n\telse\n\t\troot[\"CssSelectorGenerator\"] = factory();\n})(self, function() {\nreturn ","var extend = require('xtend/immutable');\n\n// Public API\nmodule.exports = cartesian;\n\n/**\n * Creates cartesian product of the provided properties\n *\n * @param   {object|array} list - list of (array) properties or array of arrays\n * @returns {array} all the combinations of the properties\n */\nfunction cartesian(list)\n{\n  var last, init, keys, product = [];\n\n  if (Array.isArray(list))\n  {\n    init = [];\n    last = list.length - 1;\n  }\n  else if (typeof list == 'object' && list !== null)\n  {\n    init = {};\n    keys = Object.keys(list);\n    last = keys.length - 1;\n  }\n  else\n  {\n    throw new TypeError('Expecting an Array or an Object, but `' + (list === null ? 'null' : typeof list) + '` provided.');\n  }\n\n  function add(row, i)\n  {\n    var j, k, r;\n\n    k = keys ? keys[i] : i;\n\n    // either array or not, not expecting objects here\n    Array.isArray(list[k]) || (typeof list[k] == 'undefined' ? list[k] = [] : list[k] = [list[k]]);\n\n    for (j=0; j < list[k].length; j++)\n    {\n      r = clone(row);\n      store(r, list[k][j], k);\n\n      if (i >= last)\n      {\n        product.push(r);\n      }\n      else\n      {\n        add(r, i + 1);\n      }\n    }\n  }\n\n  add(init, 0);\n\n  return product;\n}\n\n/**\n * Clones (shallow copy) provided object or array\n *\n * @param   {object|array} obj - object or array to clone\n * @returns {object|array} - shallow copy of the provided object or array\n */\nfunction clone(obj)\n{\n  return Array.isArray(obj) ? [].concat(obj) : extend(obj);\n}\n\n/**\n * Stores provided element in the provided object or array\n *\n * @param   {object|array} obj - object or array to add to\n * @param   {mixed} elem - element to add\n * @param   {string|number} key - object's property key to add to\n * @returns {void}\n */\nfunction store(obj, elem, key)\n{\n  Array.isArray(obj) ? obj.push(elem) : (obj[key] = elem);\n}\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/**\n * Returns `true` if provided input is Element.\n * @name isElement\n * @param {*} [input]\n * @returns {boolean}\n */\nexport default function (input) {\n  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.nodeType === 1 && _typeof(input.style) === 'object' && _typeof(input.ownerDocument) === 'object';\n}","import {CssSelectorMatch} from './types'\n\n/**\n * Creates array containing only items included in all input arrays.\n */\nexport function getIntersection<T> (items: Array<Array<T>> = []): Array<T> {\n  const [firstItem = [], ...otherItems] = items\n  if (otherItems.length === 0) {\n    return firstItem\n  }\n  return (otherItems).reduce((accumulator, currentValue) => {\n    return accumulator.filter((item) => currentValue.includes(item))\n  }, firstItem)\n}\n\n/**\n * Converts array of arrays into a flat array.\n */\nexport function flattenArray<T> (input: Array<Array<T>>): Array<T> {\n  return ([] as Array<T>).concat(...input)\n}\n\n/**\n * Convert string that can contain wildcards (asterisks) to RegExp source.\n */\nexport function wildcardToRegExp (input: string): string {\n  return input\n    // convert all special characters used by RegExp, except an asterisk\n    .replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    // convert asterisk to pattern that matches anything\n    .replace(/\\*/g, '.+')\n}\n\n/**\n * Converts list of white/blacklist items to a single RegExp.\n */\nexport function convertMatchListToRegExp (\n  list: Array<CssSelectorMatch> = []\n): RegExp {\n  if (list.length === 0) {\n    return new RegExp('.^')\n  }\n  const combined_re = list\n    .map((item) => {\n      return (typeof item === 'string')\n        ? '^' + wildcardToRegExp(item) + '$'\n        : item.source\n    })\n    .join('|')\n  return new RegExp(combined_re)\n}\n","import isElement from 'iselement'\nimport {CssSelector} from './types'\nimport {getIntersection} from './utilities-data'\n\n/**\n * Check whether element is matched uniquely by selector.\n */\nexport function testSelector (\n  elements: Element[],\n  selector: CssSelector,\n  root: ParentNode = document\n): boolean {\n  const result = Array.from(root.querySelectorAll(selector))\n  return (\n    result.length === elements.length\n    && elements.every((element) => result.includes(element))\n  )\n}\n\n/**\n * Test whether selector targets element. It does not have to be a unique match.\n */\nexport function testMultiSelector (\n  element: Element,\n  selector: CssSelector,\n  root: ParentNode = document\n): boolean {\n  const result = Array.from(root.querySelectorAll(selector))\n  return result.includes(element)\n}\n\n/**\n * Find all parents of a single element.\n */\nexport function getElementParents (\n  element: Element,\n  root: ParentNode\n): Element[] {\n  const result = []\n  let parent = element\n  while (isElement(parent) && parent !== root) {\n    result.push(parent)\n    parent = parent.parentElement\n  }\n  return result\n}\n\n/**\n * Find all common parents of elements.\n */\nexport function getParents (\n  elements: Element[],\n  root?: ParentNode\n): Element[] {\n  root = root ?? getRootNode(elements[0])\n  return getIntersection(\n    elements.map((element) => getElementParents(element, root))\n  )\n}\n\n/**\n * Returns root node for given element. This needs to be used because of document-less environments, e.g. jsdom.\n */\nexport function getRootNode (element: Element): ParentNode {\n  return element.ownerDocument.querySelector(':root')\n}\n","import isElement from 'iselement'\nimport {CssSelector} from './types'\nimport {getIntersection} from './utilities-data'\n\n/**\n * Get nth-child selector for an element.\n */\nexport function getElementNthChildSelector (element: Element): CssSelector[] {\n  const parent = element.parentNode\n\n  if (parent) {\n    const siblings = Array.from(parent.childNodes).filter(isElement)\n    const elementIndex = siblings.indexOf(element)\n    if (elementIndex > -1) {\n      return [`:nth-child(${elementIndex + 1})`]\n    }\n  }\n\n  return []\n}\n\n/**\n * Get nth-child selector matching all elements.\n */\nexport function getNthChildSelector (elements: Element[]): CssSelector[] {\n  return getIntersection(elements.map(getElementNthChildSelector))\n}\n","export const DESCENDANT_OPERATOR = ' > '\nexport const CHILD_OPERATOR = ' '\nexport const SELECTOR_SEPARATOR = ', '\n\n// RegExp that will match invalid patterns that can be used in ID attribute.\nexport const INVALID_ID_RE = new RegExp([\n  '^$', // empty or not set\n  '\\\\s', // contains whitespace\n  '^\\\\d' // begins with a number\n].join('|'))\n\n// RegExp that will match invalid patterns that can be used in class attribute.\nexport const INVALID_CLASS_RE = new RegExp([\n  '^$', // empty or not set\n  '^\\\\d' // begins with a number\n].join('|'))\n\nexport const VALID_SELECTOR_TYPES = [\n  'id',\n  'class',\n  'tag',\n  'attribute',\n  'nthchild',\n  'nthoftype'\n] as const\n\n// Order in which a combined selector is constructed.\nexport const SELECTOR_PATTERN = [\n  'nthoftype',\n  'tag',\n  'id',\n  'class',\n  'attribute',\n  'nthchild'\n]\n","import {getParents} from './utilities-dom'\nimport {getNthChildSelector} from './selector-nth-child'\nimport {DESCENDANT_OPERATOR, SELECTOR_SEPARATOR} from './constants'\nimport {CssSelector} from './types'\n\n/**\n * Creates fallback selector for single element.\n */\nexport function getElementFallbackSelector (element: Element): CssSelector {\n  const selectors = getParents([element])\n    .map((element) => getNthChildSelector([element])[0])\n    .reverse()\n  return [':root', ...selectors].join(DESCENDANT_OPERATOR)\n}\n\n/**\n * Creates chain of :nth-child selectors from root to the elements.\n */\nexport function getFallbackSelector (elements: Element[]): CssSelector {\n  return elements.map(getElementFallbackSelector).join(SELECTOR_SEPARATOR)\n}\n","import {\n  CssSelectorGeneratorOptions,\n  CssSelectorMatch,\n  CssSelectorType\n} from './types'\nimport {VALID_SELECTOR_TYPES} from './constants'\n\nexport const DEFAULT_OPTIONS = {\n  selectors: ['id', 'class', 'tag', 'attribute'] as Array<CssSelectorType>,\n  // if set to true, always include tag name\n  includeTag: false,\n  whitelist: [] as Array<CssSelectorMatch>,\n  blacklist: [] as Array<CssSelectorMatch>,\n  combineWithinSelector: true,\n  combineBetweenSelectors: true,\n  root: document,\n  maxCombinations: Number.POSITIVE_INFINITY,\n  maxCandidates: Number.POSITIVE_INFINITY\n}\n\n/**\n * Makes sure returned value is a list containing only valid selector types.\n * @param input\n */\nexport function sanitizeSelectorTypes (input: unknown): Array<CssSelectorType> {\n  if (!Array.isArray(input)) {\n    return []\n  }\n  return input.filter((item) => VALID_SELECTOR_TYPES.includes(item))\n}\n\n/**\n * Checks whether provided value is of type RegExp.\n */\nexport function isRegExp (input: unknown): input is RegExp {\n  return input instanceof RegExp\n}\n\n/**\n * Checks whether provided value is usable in whitelist or blacklist.\n * @param input\n */\nexport function isCssSelectorMatch (input: unknown): input is CssSelectorMatch {\n  return (typeof input === 'string') || isRegExp(input)\n}\n\n/**\n * Converts input to a list of valid values for whitelist or blacklist.\n */\nexport function sanitizeCssSelectorMatchList (\n  input: unknown\n): Array<CssSelectorMatch> {\n  if (!Array.isArray(input)) {\n    return []\n  }\n  return input.filter(isCssSelectorMatch)\n}\n\n/**\n * Checks whether provided value is valid Node.\n */\nexport function isNode (input: unknown): input is Node {\n  return input instanceof Node\n}\n\n/**\n * Checks whether provided value is valid ParentNode.\n */\nexport function isParentNode (input: unknown): input is ParentNode {\n  const validNodeTypes = [\n    Node.DOCUMENT_NODE,\n    Node.DOCUMENT_FRAGMENT_NODE,\n    Node.ELEMENT_NODE\n  ]\n  return isNode(input) && validNodeTypes.includes(input.nodeType)\n}\n\n/**\n * Makes sure that the root node in options is valid.\n */\nexport function sanitizeRoot (input: unknown, element: Element): ParentNode {\n  return isParentNode(input)\n    ? input\n    : element.ownerDocument.querySelector(':root')\n}\n\n/**\n * Makes sure that the output is a number, usable as `maxResults` option in powerset generator.\n */\nexport function sanitizeMaxNumber (input?: unknown): number {\n  return typeof input === 'number' ? input : Number.POSITIVE_INFINITY\n}\n\n/**\n * Makes sure the options object contains all required keys.\n */\nexport function sanitizeOptions (\n  element: Element,\n  custom_options = {}\n): CssSelectorGeneratorOptions {\n  const options = {\n    ...DEFAULT_OPTIONS,\n    ...custom_options\n  }\n\n  return {\n    selectors: sanitizeSelectorTypes(options.selectors),\n    whitelist: sanitizeCssSelectorMatchList(options.whitelist),\n    blacklist: sanitizeCssSelectorMatchList(options.blacklist),\n    root: sanitizeRoot(options.root, element),\n    combineWithinSelector: !!options.combineWithinSelector,\n    combineBetweenSelectors: !!options.combineBetweenSelectors,\n    includeTag: !!options.includeTag,\n    maxCombinations: sanitizeMaxNumber(options.maxCombinations),\n    maxCandidates: sanitizeMaxNumber(options.maxCandidates)\n  }\n}\n","import {sanitizeSelectorItem} from './utilities-selectors'\nimport {convertMatchListToRegExp, getIntersection} from './utilities-data'\nimport {CssSelector} from './types'\n\n// List of attributes to be ignored. These are handled by different selector types.\nexport const ATTRIBUTE_BLACKLIST = convertMatchListToRegExp([\n  'class',\n  'id',\n  // Angular attributes\n  'ng-*'\n])\n\n/**\n * Get simplified attribute selector for an element.\n */\nexport function attributeNodeToSimplifiedSelector ({\n  nodeName\n}: Node): CssSelector {\n  return `[${nodeName}]`\n}\n\n/**\n * Get attribute selector for an element.\n */\nexport function attributeNodeToSelector ({\n  nodeName,\n  nodeValue\n}: Node): CssSelector {\n  return `[${nodeName}='${sanitizeSelectorItem(nodeValue)}']`\n}\n\n/**\n * Checks whether attribute should be used as a selector.\n */\nexport function isValidAttributeNode ({nodeName}: Node): boolean {\n  return !ATTRIBUTE_BLACKLIST.test(nodeName)\n}\n\n/**\n * Get attribute selectors for an element.\n */\nexport function getElementAttributeSelectors (element: Element): CssSelector[] {\n  const validAttributes = Array.from(element.attributes)\n    .filter(isValidAttributeNode)\n  return [\n    ...validAttributes.map(attributeNodeToSimplifiedSelector),\n    ...validAttributes.map(attributeNodeToSelector)\n  ]\n\n}\n\n/**\n * Get attribute selectors matching all elements.\n */\nexport function getAttributeSelectors (elements: Element[]): CssSelector[] {\n  const elementSelectors = elements.map(getElementAttributeSelectors)\n  return getIntersection(elementSelectors)\n}\n","import {sanitizeSelectorItem} from './utilities-selectors'\nimport {INVALID_CLASS_RE} from './constants'\nimport {CssSelector} from './types'\nimport {getIntersection} from './utilities-data'\n\n/**\n * Get class selectors for an element.\n */\nexport function getElementClassSelectors (element: Element): CssSelector[] {\n  return (element.getAttribute('class') || '')\n    .trim()\n    .split(/\\s+/)\n    .filter((item) => !INVALID_CLASS_RE.test(item))\n    .map((item) => `.${sanitizeSelectorItem(item)}`)\n}\n\n/**\n * Get class selectors matching all elements.\n */\nexport function getClassSelectors (elements: Element[]): CssSelector[] {\n  const elementSelectors = elements.map(getElementClassSelectors)\n  return getIntersection(elementSelectors)\n}\n","import {\n  sanitizeSelectorItem\n} from './utilities-selectors'\nimport {CssSelector} from './types'\n\n/**\n * Get tag selector for an element.\n */\nexport function getTagSelector (elements: Element[]): Array<CssSelector> {\n  const selectors = [...new Set(elements.map((element) => {\n    return sanitizeSelectorItem(element.tagName.toLowerCase())\n  }))]\n  return (selectors.length === 0 || selectors.length > 1) ? [] : [selectors[0]]\n}\n","import {getTagSelector} from './selector-tag'\nimport {CssSelector} from './types'\nimport {getIntersection} from './utilities-data'\n\n/**\n * Get nth-of-type selector for an element.\n */\nexport function getElementNthOfTypeSelector (element: Element): CssSelector[] {\n  const tag = getTagSelector([element])[0]\n  const parentElement = element.parentElement\n\n  if (parentElement) {\n    const siblings = Array.from(parentElement.querySelectorAll(tag))\n    const elementIndex = siblings.indexOf(element)\n    if (elementIndex > -1) {\n      return [`${tag}:nth-of-type(${elementIndex + 1})`]\n    }\n  }\n\n  return []\n}\n\n/**\n * Get Nth-of-type selector matching all elements.\n */\nexport function getNthOfTypeSelector (elements: Element[]): CssSelector[] {\n  return getIntersection(elements.map(getElementNthOfTypeSelector))\n}\n","type powerSetGeneratorOptions = {\n  maxResults?: number\n}\n\n/**\n * Generates power set of input items.\n */\nexport function getPowerSet<T> (\n  input: Array<T> = [],\n  {maxResults = Number.POSITIVE_INFINITY}: powerSetGeneratorOptions = {}\n): Array<Array<T>> {\n  const result = []\n  let resultCounter = 0\n  let offsets = generateOffsets(1)\n\n  while ((offsets.length <= input.length) && (resultCounter < maxResults)) {\n    resultCounter += 1\n    result.push(offsets.map((offset) => input[offset]))\n    offsets = bumpOffsets(offsets, input.length - 1)\n  }\n\n  return result\n}\n\n/**\n * Helper function used by `getPowerSet`. Updates internal pointers.\n */\nfunction bumpOffsets (offsets: number[] = [], maxValue = 0): number[] {\n  const size = offsets.length\n  if (size === 0) {\n    return []\n  }\n  const result = [...offsets]\n  result[size - 1] += 1\n  for (let index = size - 1; index >= 0; index--) {\n    if (result[index] > maxValue) {\n      if (index === 0) {\n        return generateOffsets(size + 1)\n      } else {\n        result[index - 1]++\n        result[index] = result[index - 1] + 1\n      }\n    }\n  }\n\n  if (result[size - 1] > maxValue) {\n    return generateOffsets(size + 1)\n  }\n\n  return result\n}\n\n/**\n * Generates array of size N, filled with numbers sequence starting from 0.\n */\nfunction generateOffsets (size = 1): Array<number> {\n  return Array.from(Array(size).keys())\n}\n","import cartesian from 'cartesian'\nimport {\n  CHILD_OPERATOR,\n  DESCENDANT_OPERATOR,\n  SELECTOR_PATTERN,\n} from './constants'\nimport {getAttributeSelectors} from './selector-attribute'\nimport {getClassSelectors} from './selector-class'\nimport {getIdSelector} from './selector-id'\nimport {getNthChildSelector} from './selector-nth-child'\nimport {getNthOfTypeSelector} from './selector-nth-of-type'\nimport {getTagSelector} from './selector-tag'\nimport {\n  convertMatchListToRegExp,\n  flattenArray,\n} from './utilities-data'\nimport {getParents, testSelector} from './utilities-dom'\nimport {\n  CssSelector,\n  CssSelectorData,\n  CssSelectorGeneratorOptions,\n  CssSelectorType,\n  IdentifiableParent,\n} from './types'\nimport isElement from 'iselement'\nimport {getPowerSet} from './utilities-powerset'\n\nexport const ESCAPED_COLON = ':'\n  .charCodeAt(0)\n  .toString(16)\n  .toUpperCase()\n\n// Square brackets need to be escaped, but eslint has a problem with that.\n/* eslint-disable-next-line no-useless-escape */\nexport const SPECIAL_CHARACTERS_RE = /[ !\"#$%&'()\\[\\]{|}<>*+,./;=?@^`~\\\\]/\n\n/**\n * Escapes special characters used by CSS selector items.\n */\nexport function sanitizeSelectorItem (input = ''): string {\n  return input.split('')\n    .map((character) => {\n      if (character === ':') {\n        return `\\\\${ESCAPED_COLON} `\n      }\n      if (SPECIAL_CHARACTERS_RE.test(character)) {\n        return `\\\\${character}`\n      }\n      return escape(character)\n        .replace(/%/g, '\\\\')\n    })\n    .join('')\n}\n\nexport const SELECTOR_TYPE_GETTERS = {\n  tag: getTagSelector,\n  id: getIdSelector,\n  class: getClassSelectors,\n  attribute: getAttributeSelectors,\n  nthchild: getNthChildSelector,\n  nthoftype: getNthOfTypeSelector,\n}\n\n/**\n * Returns list of selectors of given type for the element.\n */\nexport function getSelectorsByType (\n  elements: Element[],\n  selector_type: CssSelectorType,\n): Array<CssSelector> {\n  const getter = (\n    SELECTOR_TYPE_GETTERS[selector_type]\n    ?? ((): Array<CssSelector> => [])\n  )\n  return getter(elements)\n}\n\n/**\n * Remove blacklisted selectors from list.\n */\nexport function filterSelectors (\n  list: Array<CssSelector> = [],\n  blacklist_re: RegExp,\n  whitelist_re: RegExp,\n): Array<CssSelector> {\n  return list.filter((item) => (\n    whitelist_re.test(item)\n    || !blacklist_re.test(item)\n  ))\n}\n\n/**\n * Prioritise whitelisted selectors in list.\n */\nexport function orderSelectors (\n  list: Array<CssSelector> = [],\n  whitelist_re: RegExp,\n): Array<CssSelector> {\n  return list.sort((a, b) => {\n    const a_is_whitelisted = whitelist_re.test(a)\n    const b_is_whitelisted = whitelist_re.test(b)\n    if (a_is_whitelisted && !b_is_whitelisted) {\n      return -1\n    }\n    if (!a_is_whitelisted && b_is_whitelisted) {\n      return 1\n    }\n    return 0\n  })\n}\n\n/**\n * Returns list of unique selectors applicable to given element.\n */\nexport function getAllSelectors (\n  elements: Element[],\n  root: ParentNode,\n  options: CssSelectorGeneratorOptions,\n): Array<CssSelector> {\n  const selectors_list = getSelectorsList(elements, options)\n  const type_combinations = getTypeCombinations(selectors_list, options)\n  const all_selectors = flattenArray(type_combinations) as Array<CssSelector>\n  return [...new Set(all_selectors)]\n}\n\n/**\n * Creates object containing all selector types and their potential values.\n */\nexport function getSelectorsList (\n  elements: Element[],\n  options: CssSelectorGeneratorOptions,\n): CssSelectorData {\n  const {\n    blacklist,\n    whitelist,\n    combineWithinSelector,\n    maxCombinations,\n  } = options\n\n  const blacklist_re = convertMatchListToRegExp(blacklist)\n  const whitelist_re = convertMatchListToRegExp(whitelist)\n\n  const reducer = (data: CssSelectorData, selector_type: CssSelectorType) => {\n    const selectors_by_type = getSelectorsByType(elements, selector_type)\n    const filtered_selectors =\n      filterSelectors(selectors_by_type, blacklist_re, whitelist_re)\n    const found_selectors = orderSelectors(filtered_selectors, whitelist_re)\n\n    data[selector_type] = combineWithinSelector\n      ? getPowerSet(found_selectors, {maxResults: maxCombinations})\n      : found_selectors.map((item) => [item])\n\n    return data\n  }\n\n  return getSelectorsToGet(options)\n    .reduce(reducer, {})\n}\n\n/**\n * Creates list of selector types that we will need to generate the selector.\n */\nexport function getSelectorsToGet (\n  options: CssSelectorGeneratorOptions,\n): Array<CssSelectorType> {\n  const {\n    selectors,\n    includeTag,\n  } = options\n\n  const selectors_to_get = [].concat(selectors)\n  if (includeTag && !selectors_to_get.includes('tag')) {\n    selectors_to_get.push('tag')\n  }\n  return selectors_to_get\n}\n\n/**\n * Adds \"tag\" to a list, if it does not contain it. Used to modify selectors\n * list when includeTag option is enabled to make sure all results contain the\n * TAG part.\n */\nfunction addTagTypeIfNeeded (\n  list: Array<CssSelectorType>,\n): Array<CssSelectorType> {\n  return (list.includes('tag') || list.includes('nthoftype'))\n    ? [...list]\n    : [...list, 'tag']\n}\n\n/**\n * Generates list of possible selector type combinations.\n */\nexport function combineSelectorTypes (\n  options: CssSelectorGeneratorOptions,\n): Array<Array<CssSelectorType>> {\n  const {\n    selectors,\n    combineBetweenSelectors,\n    includeTag,\n    maxCandidates,\n  } = options\n\n  const combinations = combineBetweenSelectors\n    ? getPowerSet(selectors, {maxResults: maxCandidates})\n    : selectors.map(item => [item])\n\n  return includeTag\n    ? combinations.map(addTagTypeIfNeeded)\n    : combinations\n}\n\n/**\n * Generates list of combined CSS selectors.\n */\nexport function getTypeCombinations (\n  selectors_list: CssSelectorData,\n  options: CssSelectorGeneratorOptions,\n): Array<Array<CssSelector>> {\n  return combineSelectorTypes(options)\n    .map((item) => {\n      return constructSelectors(item, selectors_list)\n    })\n    .filter((item) => item.length > 0)\n}\n\n/**\n * Generates all variations of possible selectors from provided data.\n */\nexport function constructSelectors (\n  selector_types: Array<CssSelectorType>,\n  selectors_by_type: CssSelectorData,\n): Array<CssSelector> {\n  const data: CssSelectorData = {}\n  selector_types.forEach((selector_type) => {\n    const selector_variants = selectors_by_type[selector_type]\n    if (selector_variants.length > 0) {\n      data[selector_type] = selector_variants\n    }\n  })\n\n  const combinations = cartesian(data)\n  return combinations.map(constructSelector)\n}\n\n/**\n * Creates selector for given selector type. Combines several parts if needed.\n */\nexport function constructSelectorType (\n  selector_type: CssSelectorType,\n  selectors_data: CssSelectorData,\n): CssSelector {\n  return (selectors_data[selector_type])\n    ? selectors_data[selector_type].join('')\n    : ''\n}\n\n/**\n * Converts selector data object to a selector.\n */\nexport function constructSelector (\n  selectorData: CssSelectorData = {},\n): CssSelector {\n  const pattern = [...SELECTOR_PATTERN]\n  // selector \"nthoftype\" already contains \"tag\"\n  if (selectorData['tag'] && selectorData['nthoftype']) {\n    pattern.splice(pattern.indexOf('tag'), 1)\n  }\n\n  return pattern\n    .map((type) => constructSelectorType(type as CssSelectorType, selectorData))\n    .join('')\n}\n\n/**\n * Generates combinations of child and descendant selectors within root selector.\n */\nfunction generateCandidateCombinations (\n  selectors: CssSelector[],\n  rootSelector: CssSelector\n): CssSelector[] {\n  return [\n    ...selectors.map(\n      (selector) => rootSelector + CHILD_OPERATOR + selector\n    ),\n    ...selectors.map(\n      (selector) => rootSelector + DESCENDANT_OPERATOR + selector\n    ),\n  ]\n}\n\n/**\n * Generates a list of selector candidates that can potentially match target element.\n */\nfunction generateCandidates (\n  selectors: CssSelector[],\n  rootSelector: CssSelector\n): CssSelector[] {\n  return rootSelector === ''\n    ? selectors\n    : generateCandidateCombinations(selectors, rootSelector)\n}\n\n/**\n * Tries to find an unique CSS selector for element within given parent.\n */\nexport function getSelectorWithinRoot (\n  elements: Element[],\n  root: ParentNode,\n  rootSelector: CssSelector = '',\n  options: CssSelectorGeneratorOptions,\n): (null | CssSelector) {\n  const elementSelectors = getAllSelectors(elements, options.root, options)\n  const selectorCandidates = generateCandidates(elementSelectors, rootSelector)\n  for (const candidateSelector of selectorCandidates) {\n    if (testSelector(elements, candidateSelector, options.root)) {\n      return candidateSelector\n    }\n  }\n  return null\n}\n\n/**\n * Climbs through parents of the element and tries to find the one that is identifiable by unique CSS selector.\n */\nexport function getClosestIdentifiableParent (\n  elements: Element[],\n  root: ParentNode,\n  rootSelector: CssSelector = '',\n  options: CssSelectorGeneratorOptions,\n): IdentifiableParent {\n  if (elements.length === 0) {\n    return null\n  }\n\n  const candidatesList = [\n    (elements.length > 1) ? elements : [],\n    ...getParents(elements, root)\n      .map((element) => [element]),\n  ]\n\n  for (const currentElements of candidatesList) {\n    const result =\n      getSelectorWithinRoot(currentElements, root, rootSelector, options)\n    if (result) {\n      return {\n        foundElements: currentElements,\n        selector: result,\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Converts input into list of elements, removing duplicates and non-elements.\n */\nexport function sanitizeSelectorNeedle (needle: unknown): Element[] {\n  const elements = (Array.isArray(needle) ? needle : [needle]).filter(isElement)\n  return [...new Set(elements)]\n}\n","import {sanitizeSelectorItem} from './utilities-selectors'\nimport {INVALID_ID_RE} from './constants'\nimport {testSelector} from './utilities-dom'\nimport {CssSelector} from './types'\n\n/**\n * Get ID selector for an element.\n */\nexport function getIdSelector (elements: Element[]): Array<CssSelector> {\n  if (elements.length === 0 || elements.length > 1) {\n    return []\n  }\n  const element = elements[0]\n  const id = element.getAttribute('id') || ''\n  const selector = `#${sanitizeSelectorItem(id)}`\n  return (\n    !INVALID_ID_RE.test(id)\n    && testSelector([element], selector, element.ownerDocument)\n  )\n    ? [selector]\n    : []\n}\n","import {getFallbackSelector} from './selector-fallback'\nimport {sanitizeOptions} from './utilities-options'\nimport {\n  getClosestIdentifiableParent,\n  sanitizeSelectorNeedle\n} from './utilities-selectors'\nimport {CssSelector} from './types'\nimport {testSelector} from './utilities-dom'\nimport {SELECTOR_SEPARATOR} from './constants'\n\n/**\n * Generates unique CSS selector for an element.\n */\nexport function getCssSelector (\n  needle: unknown,\n  custom_options = {}\n): CssSelector {\n  const elements = sanitizeSelectorNeedle(needle)\n  const options = sanitizeOptions(elements[0], custom_options)\n  let partialSelector = ''\n  let currentRoot = options.root\n\n  /**\n   * Utility function to make subsequent calls shorter.\n   */\n  function updateIdentifiableParent () {\n    return getClosestIdentifiableParent(\n      elements,\n      currentRoot,\n      partialSelector,\n      options\n    )\n  }\n\n  let closestIdentifiableParent = updateIdentifiableParent()\n  while (closestIdentifiableParent) {\n    const {\n      foundElements,\n      selector\n    } = closestIdentifiableParent\n    if (testSelector(elements, selector, options.root)) {\n      return selector\n    }\n    currentRoot = foundElements[0]\n    partialSelector = selector\n    closestIdentifiableParent = updateIdentifiableParent()\n  }\n\n  // if failed to find single selector matching all elements, try to find\n  // selector for each standalone element and join them together\n  if (elements.length > 1) {\n    return elements\n      .map((element) => getCssSelector(element, options))\n      .join(SELECTOR_SEPARATOR)\n  }\n\n  return getFallbackSelector(elements)\n}\n\nexport default getCssSelector\n"],"names":["root","factory","exports","module","define","amd","self","extend","store","obj","elem","key","Array","isArray","push","list","last","init","keys","product","length","TypeError","Object","add","row","i","j","k","r","concat","target","arguments","source","hasOwnProperty","call","prototype","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","prop","Symbol","toStringTag","value","_typeof","iterator","constructor","input","nodeType","style","ownerDocument","getIntersection","items","firstItem","otherItems","reduce","accumulator","currentValue","filter","item","includes","convertMatchListToRegExp","RegExp","combined_re","map","replace","join","testSelector","elements","selector","document","result","from","querySelectorAll","every","element","getParents","querySelector","parent","parentElement","getElementParents","getElementNthChildSelector","parentNode","elementIndex","childNodes","indexOf","getNthChildSelector","INVALID_ID_RE","INVALID_CLASS_RE","VALID_SELECTOR_TYPES","SELECTOR_PATTERN","getElementFallbackSelector","reverse","DEFAULT_OPTIONS","selectors","includeTag","whitelist","blacklist","combineWithinSelector","combineBetweenSelectors","maxCombinations","Number","POSITIVE_INFINITY","maxCandidates","isCssSelectorMatch","isRegExp","sanitizeCssSelectorMatchList","sanitizeRoot","validNodeTypes","Node","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","ELEMENT_NODE","isNode","isParentNode","sanitizeMaxNumber","ATTRIBUTE_BLACKLIST","attributeNodeToSimplifiedSelector","nodeName","attributeNodeToSelector","nodeValue","sanitizeSelectorItem","isValidAttributeNode","test","getElementAttributeSelectors","validAttributes","attributes","getElementClassSelectors","getAttribute","trim","split","getTagSelector","Set","tagName","toLowerCase","getElementNthOfTypeSelector","tag","getPowerSet","maxResults","resultCounter","offsets","generateOffsets","offset","bumpOffsets","maxValue","size","index","ESCAPED_COLON","charCodeAt","toString","toUpperCase","SPECIAL_CHARACTERS_RE","character","escape","SELECTOR_TYPE_GETTERS","id","class","attribute","nthchild","nthoftype","addTagTypeIfNeeded","constructSelector","selectorData","pattern","splice","type","constructSelectorType","selectors_data","selector_type","getSelectorWithinRoot","rootSelector","options","selectorCandidates","generateCandidateCombinations","generateCandidates","all_selectors","selectors_list","combinations","combineSelectorTypes","selector_types","selectors_by_type","data","forEach","selector_variants","constructSelectors","getTypeCombinations","blacklist_re","whitelist_re","selectors_to_get","getSelectorsToGet","found_selectors","sort","b","a_is_whitelisted","b_is_whitelisted","orderSelectors","filterSelectors","getSelectorsByType","getSelectorsList","getAllSelectors","candidateSelector","getCssSelector","needle","custom_options","sanitizeSelectorNeedle","sanitizeOptions","partialSelector","currentRoot","updateIdentifiableParent","candidatesList","currentElements","foundElements","getClosestIdentifiableParent","closestIdentifiableParent","getFallbackSelector"],"sourceRoot":""}